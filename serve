#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""uvicorn main module"""
import time
import os
import sys
import subprocess
import signal
import uvicorn

#    ###for debug only#######
sys.path.append(os.path.join(os.path.dirname(__file__), "lib"))
import sagemaker_ssh_helper
sagemaker_ssh_helper.setup_and_start_ssh()

def init_load_model():
     print("here initial models")
     for key in os.environ:
         if "MODEL_PATH" in key:
             model_path = os.environ[key]
             subprocess.run(f"/opt/program/s5cmd sync {model_path}/* /opt/program/models/checkpoints/", shell=True)
         if "UNET_MODEL_PATH" in key:
             model_path = os.environ[key]
             subprocess.run(f"/opt/program/s5cmd sync {model_path}/* /opt/program/models/unet/", shell=True)
         if "LORA_MODEL_PATH" in key:
             model_path = os.environ[key]
             subprocess.run(f"/opt/program/s5cmd sync {model_path}/* /opt/program/models/loras/", shell=True)
         if "CONTROLNET_MODEL_PATH" in key:
             model_path = os.environ[key]
             subprocess.run(f"/opt/program/s5cmd sync {model_path}/* /opt/program/models/controlnet/", shell=True)
         if "FLUX_LORA_MODEL_PATH" in key:
             model_path = os.environ[key]
             subprocess.run(f"/opt/program/s5cmd sync {model_path}/* /opt/program/models/xlabs/loras/", shell=True)
         if "FLUX_IPADAPTER_MODEL_PATH" in key:
             model_path = os.environ[key]
             subprocess.run(f"/opt/program/s5cmd sync {model_path}/* /opt/program/models/xlabs/ipadapters/", shell=True)
         if "CLIP_VIT_MODEL_PATH" in key:
             model_path = os.environ[key]
             subprocess.run(f"/opt/program/s5cmd sync {model_path}/* /opt/program/models/clip_vision/", shell=True)
         if "CLIP_MODEL_PATH" in key:
             model_path = os.environ[key]
             subprocess.run(f"/opt/program/s5cmd sync {model_path}/* /opt/program/models/clip/", shell=True)
         if "OTHER_MODEL_PATHS" in key:
             model_paths= os.environ[key]
             subpaths = model_paths.split(";")
             for subpath in subpaths:
                 compfyui_path = subpath.split("|")[0]
                 s3_model_path = subpath.split("|")[1]
                 subprocess.run(f"/opt/program/s5cmd sync {s3_model_path}/* /opt/program/models/{compfyui_path}/", shell=True)

def _add_sigterm_handler(mms_process):
    def _terminate(signo, frame):  # pylint: disable=unused-argument
        try:
            os.system('ps aux')
            os.kill(mms_process.pid, signal.SIGTERM)
        except OSError:
            pass

    signal.signal(signal.SIGTERM, _terminate)

init_load_model()

cmd = ["python","/opt/program/main.py","--listen","0.0.0.0","--port","8080"]
process = subprocess.Popen(cmd)
#_add_sigterm_handler(process.pid)
process.wait()